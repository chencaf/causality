% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cgraph.R
\name{cgraph}
\alias{cgraph}
\alias{is_valid_cgraph}
\alias{is.cgraph}
\title{Casuality Graphs}
\usage{
cgraph(nodes, edges, validate = T)

is_valid_cgraph(graph)

is.cgraph(graph)
}
\arguments{
\item{nodes}{A character array of node names}

\item{edges}{A \eqn{m x 3} character matrix. Each row is an edge in the form
of (node1, node2, edgetype), with node1 and node2 being in nodes. Valid
edge types are listed below}

\item{validate}{logical value to determine whether or not to check to see
if the cgraph is valid before returning it. Default is \code{TRUE}}

\item{graph}{A graph to coerced or tested}
}
\value{
\code{cgraph} returns object of class "causality.graph", or an error
  if the graph is invalid.

\code{is_valid_cgraph} returns \code{TRUE} or \code{FALSE} depending
  on whether or not the input is valid
}
\description{
Create or test for objects of type "causality.graph"
}
\details{
A causality-graph consists of three things
  \itemize{
    \item nodes: a character vector of the nodes of the in the causal graph
    \item adjacencies a list of character vectors that contain the
      adjacencies of each node. This is calculated when a cgraph is created.
    \item edges a m x 3 character matrix which represents the edges in a
      causal graph in the form (from, to, edge). For example, if we are
      dealing with a causal graph regarding drug use and cancer, The edge
      "Smoking --> Cancer" would be stored as ("Smoking", "Cancer", "-->")
      in the edge matrix
  }
  The valid edges types for non latent variable model graphs
  (DAGs, PDAGs, Patterns) are:
  \itemize{
    \item \code{-->}
    \item \code{---}
  }
  And for latent variable models (PAGs, MAGs):
  \itemize{
    \item \code{o-o}
    \item \code{o->}
    \item \code{++>} (in Tetrad this is known as --> dd nl)
    \item \code{~~>} (in Tetrad this is known as --> pd nl)
    \item \code{<->}
  }

\code{is_valid_cgraph} checks to see if the input is a valid
  "causality.graph." Specifally, it checks that there are no duplicate nodes,
  as well as if the input is simple (no self-loops and is not a multi-graph).

\code{is.cgraph} tests whether or not an object has the class
  causality.graph
  @return \code{is.cgraph} returns \code{TRUE} or \code{FALSE}.
}
\examples{
nodes <- c("X1", "X2", "X3", "X4")
edges <- matrix(c("X1", "X2", "-->",
                  "X3", "X2", "-->",
                  "X4", "X1", "---",
                  "X4", "X3", "-->",
                  "X4", "X2", "-->"), ncol = 3, byrow = T)
graph <- cgraph(nodes, edges)

# cgraph defaults to validate = TRUE, but if you want to make sure it is
is_valid_cgraph(graph)

# you can coerce graphs from bnlearn to causality.graphs
library(bnlearn)
sachs <- as.cgraph(mmhc(sachs.df))
}
\references{
Spirtes et al. “Causation, Prediction, and Search.”, Mit Press,
  2001, p. 109.

 Spirtes P. Introduction to causal inference.
 Journal of Machine Learning Research. 2010;11(May):1643-62.

  Pearl, Judea. Causality. Cambridge university press, 2009.
}
\seealso{
coercing non causality graphs to causality.graphs : \code{\link{as.cgraph}}
}
\author{
Alexander Rix
}
